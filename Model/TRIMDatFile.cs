using System;
using System.IO;

namespace TRIM_Helper.Model
{
    public class TRIMDatFile
    {
        public string FilePath;
        public string IonRowName;
        public string CalcComment;
        public int IonsCount = 10000;
        public int DecimalPoints = 5;

        public double IonStartX = 0.0;
        public double IonStartY = 0.0;
        public double IonStartZ = 0.0;
        public double IonStartCosX = 1.0;
        public double IonStartCosY = 0.0;
        public double IonStartCosZ = 0.0;

        //Random Flags
        public bool IsRandomX = true;
        public bool IsRandomY = true;
        public bool IsRandomZ = true;
        public bool IsRandomCosX = true;
        public bool IsRandomCosY = true;
        public bool IsRandomCosZ = true;

        public TRIMDatFile()
        {
            
        }

        public double GenerateRandomIn(double MaxValue, double MinValue = 0)
        {
            Random rnd = new Random();
            return rnd.NextDouble() * (MaxValue - MinValue) + MinValue;
        }

        public void GenerateDataFile(string FilePath, Ion Ions, TargetLayer[] Layers, IProgress<int> progress, bool IsOutData, string OutDataPath = null)
        {
            if (Ions == null)
            {
                throw new Exception("Empty Ions List");
            }
            FilePath = (!string.IsNullOrEmpty(FilePath)) ? FilePath + "TRIM.dat" : "TRIM.dat";
            double sumWidth = 0;
            if (!IsOutData)
            {
                
                for (int i = 0; i < Layers.Length; i++)
                    sumWidth += Layers[i].Depth;

                GeneratePositions(ref Ions, Layers[0].Depth, sumWidth);
                GenerateAngles(ref Ions);
            }
            else if (!string.IsNullOrEmpty(OutDataPath))
            {
                Ions.IonsPos = MiscelaniousFunctions.Read_TRANSMITT_File(OutDataPath, progress);
            }

            var linesCount = Ions.IonsPos.Length;

            using (StreamWriter writer = new StreamWriter(FilePath))
            {
                double sizeMax = Math.Round(sumWidth / 2.0, 0);
                double sizeMin = -sizeMax;
                //Writing the first 10 lines
                var bufString = "----- TRIM with various Incident Ion Energies/Angles and Depths -----\r\n" +
                                "This files was generated by TRIM Input Generator\r\n" +
                                "Created at " + DateTime.Now + "\r\n" +
                                "Target Dimensions (Anstrom):\r\n" +
                                $"X: (0,{Layers[0].Depth})\tY: ({sizeMin},{sizeMax})\tZ:({sizeMin},{sizeMax})\r\n" +
                                "Angle Limits:\r\n" +
                                $"Zenith: ({Ions.Angles.Zenith.Min},{Ions.Angles.Zenith.Max})\tAzimuth: ({Ions.Angles.Azimuth.Min},{Ions.Angles.Azimuth.Max})\r\n" +
                                CalcComment + "\r\n" +
                                $"Ions Count: {linesCount}\r\n";

                bufString += string.Format("{0,-7}{1,-5}{2,15}{3,20}{4,20}{5,20}{6,15{7,15}{8,15}",
                    "Name", "Z", "Energy(eV)", "Depth(A)", "Left(A)", "Right(A)", "Cos(x)", "Cos(y)", "Cos(z)");
                writer.WriteLine(bufString);

                //Start writing data
                for (int row = 0; row < linesCount; row++)
                {
                    string outString = string.Format(
                            "{0,-7}{1,-5}{2,15}{3,20:F" + DecimalPoints + "}{4,20:F" + DecimalPoints + "}{5,20:F" + DecimalPoints + "}{6,15:F" + DecimalPoints + "}{7,15:F" + DecimalPoints + "}{8,15:F" + DecimalPoints + "}",
                            Ions.Name,
                            Ions.Z,
                            Ions.IonsPos[row].Energy,
                            Ions.IonsPos[row].X,
                            Ions.IonsPos[row].Y,
                            Ions.IonsPos[row].Z,
                            Ions.IonsPos[row].CosX,
                            Ions.IonsPos[row].CosY,
                            Ions.IonsPos[row].CosZ);
                    writer.WriteLine(outString);
                    progress?.Report(100 * row / linesCount);

                }

                //MessageBox.Show("Job done!", "Info", MessageBoxButton.OK, MessageBoxImage.Information);
            }

        }
        public void GeneratePositions(ref Ion Ions, double LayerDepth, double LayerWidth)
        {
            if (Ions == null) Ions = new Ion(1);
            int ionCount = Ions.IonsPos.Length;
            double sizeHalfMax = Math.Round(LayerWidth / 2.0, 0);
            double sizeHalfMin = -sizeHalfMax;
            for (int i = 0; i < ionCount; i++)
            {
                //Additionally add energy definision
                Ions.IonsPos[i].Energy = Ions.Energy * 1000.0;
                Ions.IonsPos[i].X = (IsRandomX) ? GenerateRandomIn(LayerDepth, 0.0) : IonStartX;
                Ions.IonsPos[i].Y = (IsRandomY) ? GenerateRandomIn(sizeHalfMax, sizeHalfMin) : IonStartY;
                Ions.IonsPos[i].Z = (IsRandomZ) ? GenerateRandomIn(sizeHalfMax, sizeHalfMin) : IonStartZ;
            }
        }

        public void GenerateAngles(ref Ion Ions)
        {
            if (Ions == null) Ions = new Ion(1);
            int ionCount = Ions.IonsPos.Length;
            for (int i = 0; i < ionCount; i++)
            {
                var rndZenith = GenerateRandomIn(Ions.Angles.Zenith.Max, Ions.Angles.Zenith.Min);
                var rndAzimuth = GenerateRandomIn(Ions.Angles.Azimuth.Max, Ions.Angles.Azimuth.Min);
                Ions.IonsPos[i].CosX = (IsRandomCosX) ? Math.Cos(rndZenith) : IonStartCosX;
                Ions.IonsPos[i].CosY = (IsRandomCosY) ? Math.Sin(rndZenith) * Math.Sin(rndAzimuth) : IonStartCosY;
                Ions.IonsPos[i].CosZ = (IsRandomCosZ) ? Math.Sin(rndZenith) * Math.Cos(rndAzimuth) : IonStartCosZ;
            }
        }
    }
}
